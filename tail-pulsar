#!/usr/bin/env python3

"""
Utility to read logs from a pulsar topic
"""

import pulsar

DEFAULT_CONFIG = {
    "client": {
        "service_url": "pulsar://localhost:6650",
    },
    "reader": {
        "topic": "syslog",
    },
}

def tail(reader):
    while True:
        msg = reader.read_next()
        t = msg.event_timestamp()
        if t:
            ts = datetime.datetime.utcfromtimestamp(t/1000.0).strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
        else:
            ts = "-"
        print("%s %r %s" % (ts, msg.properties(), msg.data().decode("UTF-8", errors="surrogateescape")))

if __name__ == "__main__":
    import argparse
    import datetime
    import re
    import time
    parser = argparse.ArgumentParser()
    parser.add_argument("--config", "-c", help="YAML configuration file")
    parser.add_argument("--topic", help="topic name")
    parser.add_argument("--all", "-a", action="store_true", help="read from start of topic")
    parser.add_argument("--time", "-t", help="start time relative to now")
    args = parser.parse_args()
    if args.config:
        with open(args.config) as f:
            config = yaml.load(f)
            if not isinstance(config, dict):
                raise RuntimeError("config must be a dict, not %s" % type(config))
    else:
        config = DEFAULT_CONFIG

    if args.topic:
        config["reader"]["topic"] = args.topic
    config["reader"]["start_message_id"] = (pulsar.MessageId.earliest if args.all else pulsar.MessageId.latest)

    client = pulsar.Client(**config["client"])
    reader = client.create_reader(**config["reader"])
    if args.time:
        SUFFIX = {'w': 'weeks', 'd': 'days', 'h': 'hours', 'm': 'minutes', 's': 'seconds', '': 'minutes'}
        items = re.findall(r'(\d+)(\w*)', args.time)
        dt = datetime.timedelta(**{SUFFIX[k]: int(v) for v, k in items})
        # Requires https://github.com/apache/pulsar/pull/5542
        reader.seek((time.time() - dt.total_seconds())*1000.0)
    try:
        tail(reader)
    finally:
        reader.close()
        client.close()
